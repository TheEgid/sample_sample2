version: "3.8"

services:
  fullstack:
    build:
      context: fullstack
      dockerfile: Dockerfile
    container_name: fullstack_container
    ports:
      - "127.0.0.1:3007:3007"
    # depends_on:
    #   - sqlite
    restart: on-failure
    environment:
      TZ: "Europe/Moscow"
    healthcheck:
      test: ["CMD", "curl", "127.0.0.1:3007/api/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s
    volumes:
      - ./fullstack/prisma:/app/prisma
    #   - ./../database:/app/data/database.db

  # sqlite:
  #   container_name: sqllite_container
  #   image: alpine:latest
  #   build:
  #     context: sqlite
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./../database.db:/app/data/database.db

  # postgres:
  #   build:
  #     context: postgres-db
  #     dockerfile: Dockerfile
  #   container_name: full_db_postgres
  #   volumes:
  #     - database_volume:/var/lib/postgresql/data
  #   ports:
  #     - "127.0.0.1:5432:5432"
  #   environment:
  #     TZ: "Europe/Moscow"
  #     POSTGRES_DB: "${NEXT_PUBLIC_DB_NAME_DEV}"
  #     POSTGRES_USER: "${NEXT_PUBLIC_DB_USER_DEV}"
  #     POSTGRES_PASSWORD: "${NEXT_PUBLIC_DB_PASSWORD_DEV}"
  #     PGDATA: "/var/lib/postgresql/data/pgdata"
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "pg_isready -U ${NEXT_PUBLIC_DB_USER_DEV} -d ${NEXT_PUBLIC_DB_NAME_DEV}",
  #       ]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 2
  #     start_period: 5s

  # reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      # - ./../database.db:/app/data/database.db
      # - ./fullstack/public/files:/opt/files
      # - ./log/report:/opt/report
      # - ./.htpasswd:/opt/.htpasswd
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf
      - ./log/nginx:/var/log/nginx
    environment:
      - TZ=Europe/Moscow
    depends_on:
      - fullstack
      # - postgres
    # healthcheck:
    #   test: ["CMD", "curl", "--silent", "--fail", "http://localhost:80/health"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 2
    #   start_period: 5s

  # dockerize:
  #   image: jwilder/dockerize
  #   command: >
  #     -wait tcp://postgres:5432 -timeout 60s
  #   depends_on:
  #     - postgres

volumes:
  # database_volume:
  fullstack:
