include ./main-applic/.env
export

COMPOSE_BAKE=true

LANG=ru_RU.UTF-8


all: run clean # restore test clean run


run:
	@docker compose build
	@docker compose up -d
	@docker ps


runner:
	@docker compose up


stop:
	@docker compose down


clean:
	@docker system prune -f
	@docker system prune -f --volumes


up:
	@sudo dnf --refresh update && sudo dnf upgrade

SQLITE_DUMP := $(shell pwd)/backup/backup.sql
PG_DUMP := $(shell pwd)/backup/backup_postgres.sql
BACKUP_DIR := $(shell pwd)/backup
# //–∏–º—è —á–µ—Ä–µ–∑ - docker images | grep sqltranslator
IMAGE_NAME := sample_sample2-sqltranslator


restore_sqllite:
	@if [ ! -f $(SQLITE_DUMP) ]; then \
		echo "–§–∞–π–ª –¥–∞–º–ø–∞ $(SQLITE_DUMP) –Ω–µ –Ω–∞–π–¥–µ–Ω!"; \
		exit 1; \
	fi
	@echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä db_sqlite_container..."
	@docker stop db_sqlite_container || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
	@echo "–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ ./main-applic/prisma..."
	@rm -f ./main-applic/prisma/database-sql-lite.db || echo "–§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
	@echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä db_sqlite_container..."
	@docker start db_sqlite_container
	@sleep 5
	@if ! docker ps --filter "name=db_sqlite_container" --filter "status=running" | grep -q db_sqlite_container; then \
		echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä db_sqlite_container –Ω–µ –∑–∞–ø—É—â–µ–Ω!"; \
		exit 1; \
	fi
	@echo "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –∏–∑ –¥–∞–º–ø–∞..."
	@if sed '/BEGIN TRANSACTION;/d;/COMMIT;/d' $(SQLITE_DUMP) | docker exec -i db_sqlite_container sqlite3 /database/database-sql-lite.db; then \
		echo "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! $$(date +%F--%H-%M)"; \
	else \
		echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã!"; \
		exit 1; \
	fi


backup_sqllite:
	@echo "–°–æ–∑–¥–∞—ë–º –¥–∞–º–ø –±–∞–∑—ã SQLite —Å DROP TABLE –∏ DROP INDEX..."
	@mkdir -p $(BACKUP_DIR)
	@chmod 777 $(BACKUP_DIR)
	@if docker exec -i db_sqlite_container sh -c '\
		echo "BEGIN TRANSACTION;"; \
		sqlite3 /database/database-sql-lite.db "SELECT '\''DROP TABLE IF EXISTS '\'' || name || '\'';'\'' FROM sqlite_master WHERE type='\''table'\'' AND name NOT LIKE '\''sqlite_%'\'';"; \
		sqlite3 /database/database-sql-lite.db "SELECT '\''DROP INDEX IF EXISTS '\'' || name || '\'';'\'' FROM sqlite_master WHERE type='\''index'\'';"; \
		sqlite3 /database/database-sql-lite.db ".dump"; \
		echo "COMMIT;"; \
	' > $(SQLITE_DUMP); then \
		chmod 777 $(SQLITE_DUMP); \
		echo "–î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! $$(date +%F--%H-%M)"; \
	else \
		echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞ –±–∞–∑—ã!"; \
		exit 1; \
	fi


SQLITE_DATABASE := ./main-applic/prisma/database-sql-lite.db
POSTGRES_CONTAINER := db_postgres_container
IMPORT_LOAD_TEMPLATE := import.load.tpl
IMPORT_LOAD :=import.load

import_to_postgres:
	@if [ ! -f $(SQLITE_DATABASE) ]; then \
		echo "‚ùå –§–∞–π–ª SQLite –±–∞–∑—ã $(SQLITE_DATABASE) –Ω–µ –Ω–∞–π–¥–µ–Ω!"; \
		exit 1; \
	fi
	@if ! docker ps --filter "name=$(POSTGRES_CONTAINER)" --filter "status=running" | grep -q $(POSTGRES_CONTAINER); then \
		echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $(POSTGRES_CONTAINER) –Ω–µ –∑–∞–ø—É—â–µ–Ω!"; \
		exit 1; \
	fi
	@echo "üì¶ –ö–æ–ø–∏—Ä—É–µ–º SQLite –±–∞–∑—É –∏ —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä $(POSTGRES_CONTAINER)..."
	@docker cp $(SQLITE_DATABASE) $(POSTGRES_CONTAINER):/app/database-sql-lite.db
	@docker cp $(IMPORT_LOAD_TEMPLATE) $(POSTGRES_CONTAINER):/app/import.load.tpl
	@echo "üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ pgloader —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–ø—É—Å–∫ –æ—Ç root)..."
	@docker exec -u root $(POSTGRES_CONTAINER) /bin/sh -c 'export NEXT_PUBLIC_DB_USER_DEV="$(NEXT_PUBLIC_DB_USER_DEV)" && export NEXT_PUBLIC_DB_PASSWORD_DEV="$(NEXT_PUBLIC_DB_PASSWORD_DEV)" && export NEXT_PUBLIC_DB_NAME_DEV="$(NEXT_PUBLIC_DB_NAME_DEV)" && envsubst < /app/import.load.tpl > /app/import.load'
	@echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º pgloader –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $(POSTGRES_CONTAINER)..."
	@docker exec -i $(POSTGRES_CONTAINER) pgloader /app/import.load
	@echo "‚úÖ –ì–æ—Ç–æ–≤–æ!"
