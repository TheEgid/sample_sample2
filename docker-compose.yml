services:

  main-applic:
    build:
      context: main-applic
      dockerfile: Dockerfile
    container_name: main-applic_container
    ports:
      - "127.0.0.1:3007:3007"
    restart: on-failure
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:3007/api/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 30s
    volumes:
      - ./main-applic/prisma:/app/prisma
      - ./sqlite-db:/sqlite-db
    command: >
      sh -c "if [ \"$$DOCKER_ENV\" = \"true\" ]; then
        while ! nc -z postgres 5432; do
          sleep 1;
          echo 'Waiting for PostgreSQL...';
        done;
      fi;
      pnpm start"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf
      - ./log/nginx:/var/log/nginx
    environment:
      TZ: "Europe/Moscow"
    depends_on:
      main-applic:
        condition: service_healthy

  sqltranslator:
    container_name: sqltranslator_container
    build:
      context: ./sqltranslator
      dockerfile: Dockerfile
    working_dir: /app
    depends_on:
      db_sqlite:
        condition: service_healthy

  db_sqlite:
    container_name: db_sqlite_container
    image: nouchka/sqlite3
    volumes:
      - ./main-applic/prisma:/database
    tty: true
    stdin_open: true
    working_dir: /database
    entrypoint: >
      sh -c "
      if [ ! -f /database/database-sql-lite.db ]; then
        echo 'Создаём базу данных...';
        sqlite3 /database/database-sql-lite.db 'PRAGMA journal_mode=WAL;';
      fi;
      exec sqlite3 /database/database-sql-lite.db
      "
    healthcheck:
      test: ["CMD-SHELL", "sqlite3 /database/database-sql-lite.db 'SELECT 1;'"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  postgres:
    build:
      context: postgres-db
      dockerfile: Dockerfile
    container_name: full_db_postgres
    volumes:
      - database_volume:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      TZ: "Europe/Moscow"
      POSTGRES_DB: "${NEXT_PUBLIC_DB_NAME_DEV}"
      POSTGRES_USER: "${NEXT_PUBLIC_DB_USER_DEV}"
      POSTGRES_PASSWORD: "${NEXT_PUBLIC_DB_PASSWORD_DEV}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${NEXT_PUBLIC_DB_USER_DEV} -d ${NEXT_PUBLIC_DB_NAME_DEV}",
        ]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s

volumes:
  database_volume:
